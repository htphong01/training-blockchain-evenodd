/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export interface CashManagerInterface extends utils.Interface {
    functions: {
        'buy()': FunctionFragment;
        'cash()': FunctionFragment;
        'initialize(address)': FunctionFragment;
        'owner()': FunctionFragment;
        'renounceOwnership()': FunctionFragment;
        'supportsInterface(bytes4)': FunctionFragment;
        'transferOwnership(address)': FunctionFragment;
        'withdraw(uint256)': FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | 'buy'
            | 'cash'
            | 'initialize'
            | 'owner'
            | 'renounceOwnership'
            | 'supportsInterface'
            | 'transferOwnership'
            | 'withdraw'
    ): FunctionFragment;

    encodeFunctionData(functionFragment: 'buy', values?: undefined): string;
    encodeFunctionData(functionFragment: 'cash', values?: undefined): string;
    encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;

    decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'cash', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

    events: {
        'Bought(address,uint256)': EventFragment;
        'Initialized(uint8)': EventFragment;
        'OwnershipTransferred(address,address)': EventFragment;
        'SetPricePerCash(uint256)': EventFragment;
        'Withdrawn(address,uint256)': EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: 'Bought'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'SetPricePerCash'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface BoughtEventObject {
    _account: string;
    _amount: BigNumber;
}
export type BoughtEvent = TypedEvent<[string, BigNumber], BoughtEventObject>;

export type BoughtEventFilter = TypedEventFilter<BoughtEvent>;

export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SetPricePerCashEventObject {
    _rate: BigNumber;
}
export type SetPricePerCashEvent = TypedEvent<[BigNumber], SetPricePerCashEventObject>;

export type SetPricePerCashEventFilter = TypedEventFilter<SetPricePerCashEvent>;

export interface WithdrawnEventObject {
    _account: string;
    _amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface CashManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: CashManagerInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        buy(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

        cash(overrides?: CallOverrides): Promise<[string]>;

        initialize(
            _cashAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        withdraw(
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    buy(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    cash(overrides?: CallOverrides): Promise<string>;

    initialize(
        _cashAddress: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        buy(overrides?: CallOverrides): Promise<void>;

        cash(overrides?: CallOverrides): Promise<string>;

        initialize(_cashAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        owner(overrides?: CallOverrides): Promise<string>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        withdraw(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        'Bought(address,uint256)'(_account?: PromiseOrValue<string> | null, _amount?: null): BoughtEventFilter;
        Bought(_account?: PromiseOrValue<string> | null, _amount?: null): BoughtEventFilter;

        'Initialized(uint8)'(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;

        'SetPricePerCash(uint256)'(_rate?: PromiseOrValue<BigNumberish> | null): SetPricePerCashEventFilter;
        SetPricePerCash(_rate?: PromiseOrValue<BigNumberish> | null): SetPricePerCashEventFilter;

        'Withdrawn(address,uint256)'(_account?: PromiseOrValue<string> | null, _amount?: null): WithdrawnEventFilter;
        Withdrawn(_account?: PromiseOrValue<string> | null, _amount?: null): WithdrawnEventFilter;
    };

    estimateGas: {
        buy(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        cash(overrides?: CallOverrides): Promise<BigNumber>;

        initialize(
            _cashAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        withdraw(
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        buy(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

        cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        initialize(
            _cashAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        withdraw(
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
