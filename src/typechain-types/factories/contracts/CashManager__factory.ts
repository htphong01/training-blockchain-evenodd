/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CashManager,
  CashManagerInterface,
} from "../../contracts/CashManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Bought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
    ],
    name: "SetPricePerCash",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "cash",
    outputs: [
      {
        internalType: "contract ICash",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICash",
        name: "_cashAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a36806100206000396000f3fe60806040526004361061007b5760003560e01c8063961be3911161004e578063961be3911461011e578063a6f2ae3a1461013e578063c4d66de814610146578063f2fde38b1461016657600080fd5b806301ffc9a7146100805780632e1a7d4d146100b5578063715018a6146100d75780638da5cb5b146100ec575b600080fd5b34801561008c57600080fd5b506100a061009b366004610940565b610186565b60405190151581526020015b60405180910390f35b3480156100c157600080fd5b506100d56100d036600461096a565b6101bd565b005b3480156100e357600080fd5b506100d56102d9565b3480156100f857600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016100ac565b34801561012a57600080fd5b5060c954610106906001600160a01b031681565b6100d56102ed565b34801561015257600080fd5b506100d5610161366004610998565b6103a9565b34801561017257600080fd5b506100d5610181366004610998565b61053b565b60006001600160e01b031982166388e8d37760e01b14806101b757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600260655414156102155760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260655560c9546001600160a01b0316639dc29fac336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561027457600080fd5b505af1158015610288573d6000803e3d6000fd5b5050505061029c6102963390565b826105b4565b60405181815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a2506001606555565b6102e16106d2565b6102eb600061072c565b565b60c9546001600160a01b03166340c10f19336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152346024820152604401600060405180830381600087803b15801561034657600080fd5b505af115801561035a573d6000803e3d6000fd5b505050506103653390565b6001600160a01b03167fc55650ccda1011e1cdc769b1fbf546ebb8c97800b6072b49e06cd560305b1d673460405161039f91815260200190565b60405180910390a2565b600054610100900460ff16158080156103c95750600054600160ff909116105b806103e35750303b1580156103e3575060005460ff166001145b6104465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161020c565b6000805460ff191660011790558015610469576000805461ff0019166101001790555b61047161077e565b6104796107ad565b6104816107dc565b61049282632d178d3160e01b610803565b6104d65760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a590810d85cda0818dbdb9d1c9858dd605a1b604482015260640161020c565b60c980546001600160a01b0319166001600160a01b0384161790558015610537576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6105436106d2565b6001600160a01b0381166105a85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161020c565b6105b18161072c565b50565b804710156106045760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161020c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b50509050806106cd5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161020c565b505050565b6033546001600160a01b031633146102eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161020c565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166107a55760405162461bcd60e51b815260040161020c906109b5565b6102eb610826565b600054610100900460ff166107d45760405162461bcd60e51b815260040161020c906109b5565b6102eb610856565b600054610100900460ff166102eb5760405162461bcd60e51b815260040161020c906109b5565b600061080e83610884565b801561081f575061081f83836108b7565b9392505050565b600054610100900460ff1661084d5760405162461bcd60e51b815260040161020c906109b5565b6102eb3361072c565b600054610100900460ff1661087d5760405162461bcd60e51b815260040161020c906109b5565b6001606555565b6000610897826301ffc9a760e01b6108b7565b80156101b757506108b0826001600160e01b03196108b7565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610929575060208210155b80156109355750600081115b979650505050505050565b60006020828403121561095257600080fd5b81356001600160e01b03198116811461081f57600080fd5b60006020828403121561097c57600080fd5b5035919050565b6001600160a01b03811681146105b157600080fd5b6000602082840312156109aa57600080fd5b813561081f81610983565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220cdd87245e3d9eb8836ec186e24319f70c6e164674fd9678b6ec0d491ee9393fa64736f6c63430008090033";

type CashManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CashManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CashManager__factory extends ContractFactory {
  constructor(...args: CashManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CashManager> {
    return super.deploy(overrides || {}) as Promise<CashManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CashManager {
    return super.attach(address) as CashManager;
  }
  override connect(signer: Signer): CashManager__factory {
    return super.connect(signer) as CashManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CashManagerInterface {
    return new utils.Interface(_abi) as CashManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CashManager {
    return new Contract(address, _abi, signerOrProvider) as CashManager;
  }
}
