/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CashManager,
  CashManagerInterface,
} from "../../contracts/CashManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Bought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "SetETHToCash",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "cash",
    outputs: [
      {
        internalType: "contract ICash",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ethToCash",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICash",
        name: "_cashAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "setETHToCash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e1f806100206000396000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b14610146578063961be39114610178578063a6f2ae3a14610198578063c4d66de8146101a0578063f2fde38b146101c057600080fd5b806301ffc9a714610096578063119f118d146100cb5780632e1a7d4d146100ef5780634291e1ca14610111578063715018a614610131575b600080fd5b3480156100a257600080fd5b506100b66100b1366004610ba7565b6101e0565b60405190151581526020015b60405180910390f35b3480156100d757600080fd5b506100e160ca5481565b6040519081526020016100c2565b3480156100fb57600080fd5b5061010f61010a366004610bd1565b610217565b005b34801561011d57600080fd5b5061010f61012c366004610bd1565b6103ec565b34801561013d57600080fd5b5061010f610476565b34801561015257600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016100c2565b34801561018457600080fd5b5060c954610160906001600160a01b031681565b61010f61048a565b3480156101ac57600080fd5b5061010f6101bb366004610bff565b61060b565b3480156101cc57600080fd5b5061010f6101db366004610bff565b6107a2565b60006001600160e01b03198216634cbbe17d60e11b148061021157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6002606554141561026f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260655560ca5460c9546040805163313ce56760e01b81529051600093926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156102bd57600080fd5b505afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190610c1c565b60ff166103029190610c55565b61030d90600a610d51565b61031f83670de0b6b3a7640000610d5d565b6103299190610d7c565b60c9549091506001600160a01b0316639dc29fac336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401600060405180830381600087803b15801561038657600080fd5b505af115801561039a573d6000803e3d6000fd5b505050506103ae6103a83390565b8261081b565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a250506001606555565b6103f4610939565b600081118015610405575060128111155b6104435760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420616d6f756e742160881b6044820152606401610266565b60ca81905560405181907f2f4e4476783a78b9ba4574d9e1aeedb76bb4ba750350d5da5dd325435288467090600090a250565b61047e610939565b6104886000610993565b565b6000670de0b6b3a764000060ca5460c960009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e657600080fd5b505afa1580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190610c1c565b60ff1661052b9190610c55565b61053690600a610d51565b6105409034610d5d565b61054a9190610d7c565b60c9549091506001600160a01b03166340c10f19336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b1580156105a757600080fd5b505af11580156105bb573d6000803e3d6000fd5b505050506105c63390565b6001600160a01b03167fc55650ccda1011e1cdc769b1fbf546ebb8c97800b6072b49e06cd560305b1d678260405161060091815260200190565b60405180910390a250565b600054610100900460ff161580801561062b5750600054600160ff909116105b806106455750303b158015610645575060005460ff166001145b6106a85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610266565b6000805460ff1916600117905580156106cb576000805461ff0019166101001790555b6106d36109e5565b6106db610a14565b6106e3610a43565b6106f48263761fbae960e11b610a6a565b6107385760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a590810d85cda0818dbdb9d1c9858dd605a1b6044820152606401610266565b60c980546001600160a01b0319166001600160a01b038416179055600260ca55801561079e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6107aa610939565b6001600160a01b03811661080f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610266565b61081881610993565b50565b8047101561086b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610266565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146108b8576040519150601f19603f3d011682016040523d82523d6000602084013e6108bd565b606091505b50509050806109345760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610266565b505050565b6033546001600160a01b031633146104885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610266565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610a0c5760405162461bcd60e51b815260040161026690610d9e565b610488610a8d565b600054610100900460ff16610a3b5760405162461bcd60e51b815260040161026690610d9e565b610488610abd565b600054610100900460ff166104885760405162461bcd60e51b815260040161026690610d9e565b6000610a7583610aeb565b8015610a865750610a868383610b1e565b9392505050565b600054610100900460ff16610ab45760405162461bcd60e51b815260040161026690610d9e565b61048833610993565b600054610100900460ff16610ae45760405162461bcd60e51b815260040161026690610d9e565b6001606555565b6000610afe826301ffc9a760e01b610b1e565b80156102115750610b17826001600160e01b0319610b1e565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610b90575060208210155b8015610b9c5750600081115b979650505050505050565b600060208284031215610bb957600080fd5b81356001600160e01b031981168114610a8657600080fd5b600060208284031215610be357600080fd5b5035919050565b6001600160a01b038116811461081857600080fd5b600060208284031215610c1157600080fd5b8135610a8681610bea565b600060208284031215610c2e57600080fd5b815160ff81168114610a8657600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610c6857610c68610c3f565b500190565b600181815b80851115610ca8578160001904821115610c8e57610c8e610c3f565b80851615610c9b57918102915b93841c9390800290610c72565b509250929050565b600082610cbf57506001610211565b81610ccc57506000610211565b8160018114610ce25760028114610cec57610d08565b6001915050610211565b60ff841115610cfd57610cfd610c3f565b50506001821b610211565b5060208310610133831016604e8410600b8410161715610d2b575081810a610211565b610d358383610c6d565b8060001904821115610d4957610d49610c3f565b029392505050565b6000610a868383610cb0565b6000816000190483118215151615610d7757610d77610c3f565b500290565b600082610d9957634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220d153e1a913c7bc1ea5a884e138cab5077dd8fd6f244d374a385bc236ec99519864736f6c63430008090033";

type CashManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CashManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CashManager__factory extends ContractFactory {
  constructor(...args: CashManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CashManager> {
    return super.deploy(overrides || {}) as Promise<CashManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CashManager {
    return super.attach(address) as CashManager;
  }
  override connect(signer: Signer): CashManager__factory {
    return super.connect(signer) as CashManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CashManagerInterface {
    return new utils.Interface(_abi) as CashManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CashManager {
    return new Contract(address, _abi, signerOrProvider) as CashManager;
  }
}
